No, seriously. Why wouldn't you use Erector? Cause I think it's a pretty awesome view framework, but for some reason it hasn't caught fire yet. So if you think writing actual Ruby to emit HTML, with a clean, nestable syntax with full support for Ruby features like inheritance, delegation, and yield is neat, but there's something holding you back, then please let us know what it is. At best we can fix it, and at worst, at least we'll know why.

Here are some reasons I think you might not use Erector:

**You love angle brackets.** If this is the case then I can't help you. I don't think anybody can.

**You like typing every tag name twice.** Since Erector elements are Ruby statements, every open tag gets automatically closed.

**You like invalid HTML.** Since Erector elements are Ruby statements, every open tag gets automatically closed. (See how that works?)

**You always remember to call 'h'.** Rails 3.0 is going to HTML-escape all output by default. Erector's been doing this the whole time. Cause, you know, why wouldn't you?

**You like having to rewrite your code when you extract a partial, and then again when you extract a helper method.** In ERB, templates, partials, and helpers all have slightly (and annoyingly) different syntax for things like referring to variables and calling other code. Erector is all Ruby, so you can use your [favorite refactoring browser](http://www.jetbrains.com/ruby/), or just cut and paste, to move your code around. Check out this  [excerpt from Jeff Dean's RailsConf talk](http://www.youtube.com/watch?v=hTfCPkDV0Xo) to see this in action, or read [the slides from the whole talk on SlideShare](http://www.slideshare.net/alexchaffee/advanced-views-with-erector).

**You hate encapsulation.** You think that your views should have direct access to all the instance variables of your controller. Unless they're partials, in which case you [shouldn't](http://www.robertshowalter.com/articles/2007/07/24/dont-use-instance-variables-in-partials), even though you can, although the names might be different. Confused yet? So am I.

**You like putting code for one component in three separate files.** Erector's new "externals" feature allows you to put all the code -- HTML, CSS, and JavaScript -- inside a single Ruby class. The CSS and JavaScript then get output inside the HEAD, once per HTML page, while the HTML gets rendered in the BODY as usual, as many times as necessary. This follows the OO paradigm of [cohesion](http://en.wikipedia.org/wiki/Cohesion_(computer_science), otherwise known as "put similar stuff together," which is the complement of loose coupling, which means, "keep different stuff apart."

---

Okay, so those were sarcastic reasons. Here are some more possible reasons why you wouldn't use Erector. I suspect that these next ones hit closer to the mark. But I believe that they're all specious, if not downright false.

**Your site contains a whole lot of complex HTML and a few inserted Ruby variables.** OK, this makes sense. Erector's not great for static sites. But I've never personally worked on a web application where the code inside the views didn't quickly get complex enough to require codey things like loops and functions. And if you're writing code, then why not do it in a programming language?

**Your designers don't know Ruby.** I've heard this complaint a lot, but I have yet to meet this mythical designer who's smart enough to understand modern HTML, CSS, JavaScript, ERB, and partials, but is not smart enough to learn that "div 'foo', :class=>'bar'" outputs "&lt;div class='bar'>foo&lt;/div>". On the contrary, I've worked with several designers who, after a few tutorial pairing sessions, were comfortable checking code in and out and editing Erector view code at will. Like any junior coder, they need to stay away from the tough stuff, but they're pretty good at knowing what they don't know and asking for help when they need it. (Which they would also do if working inside ERB.)

**View code needs to look as similar to HTML as possible.** Well, I hear this, but have you looked at HAML? That language is hella popular, and it doesn't look anything like HTML. Its structure is similar, in the abstract, but so's Erector's, and at least in Erector the method for emitting a div is called, you know, "div". And it's a method. And I don't want to turn this into a war between HAML and Erector -- I think HAML is gorgeous -- but HAML suffers from the same design flaw as every templating technology: views are not objects, and markup isn't code. After a certain point of complexity, HAML's elegance breaks down and you'd be better off doing loops and functions in code.

**You've already got a bunch of stuff in ERB and it'd take too long to convert it.** Yes, legacy code is a pain, but we have a command-line tool that converts ERB (or HTML) to Erector to make it a bit smoother. And you don't have to convert your whole app to Erector at once. Erector views can interoperate with Rails ERB or HAML.

**You're stuck on an old version of Erector.** Yes, legacy code is a pain, but we have an [upgrade guide](http://pivotallabs.com/users/alex/blog/articles/839-erector-0-6-3-now-ready-to-conquer-the-world) for getting to 0.6.0, and people on the [mailing list](http://googlegroups.com/group/erector) ready to help.

**Erector's too slow.** Lies! Erector is faster than a greased rattlesnake going downhill. Check out [these benchmarking results](http://erector.rubyforge.org/faq.html#howfastiserectorcomparedtoerbhamletc ). Erector is about **2x as fast as ERB and 4x as fast as HAML** under typical conditions. We make sure to use the same output stream to minimize string copy or realloc, and using Ruby objects means much lower parsing overhead.

**There's no documentation.** More lies! We have a whole bunch of documentation at <http://erector.rubyforge.org>, including a FAQ and a user guide.

**You got burned by Markaby.** Underneath the elegant facade of Markaby lay a confusing and often counter-intuitive engine. Its use of instance_eval and other tricks made simple things break in weird ways and made debugging a real chore. Erector was born out of those frustrations, and one of its main design goals is "no magic." Also, there was a long time where Markaby wasn't being maintained (although that's changed recently); we have a core group of developers committed to responding on the mailing list and github, and we run integration tests against the latest stable Rails release (and soon, against Edge) to catch incompatibilities early on.

**Rails has all these great helpers and I want to keep using them.** Okay, go right ahead! Erector's Rails integration allows you to call any helper, either directly through a proxy method, or indirectly through the helpers object. If you find a helper that doesn't work, let us know and we'll add it to the list of supported helpers. (We haven't done all of them yet because it's a pain in the neck to look at each function and figure out what its input and output semantics are. Does it return a string or emit directly onto the output stream? Does it take a block? An options hash? An html_options hash? Etc.) We're also slowly putting some Rails functionality into Erector, either in the base class or in custom widgets. If there's something you need, ask on the [mailing list](http://googlegroups.com/group/erector), or better yet, send us a patch.

**Its name is a dirty word.** I've heard this more from people who didn't grow up in the United States, where the [Erector Set](http://en.wikipedia.org/wiki/Erector_Set) was a popular toy among the 6-to-12-year-old DIY set in the 70s and 80s. (Apparently it was called [Meccano](http://en.wikipedia.org/wiki/Meccano) in the UK.)
Erector is a normal word, used all the time in the [news](http://tinyurl.com/yd55pal) and in [business names](http://google.com/search?q=steel+erector). And as the name of a view library it's evocative in a way that's relevant and interesting, in that it's a builder, and you build a view up out of parts.

But we have heard this complaint, and in sympathy, changed the name of the command-line tool (oh, sorry, guess I can't say "tool" either)-- uh, executable-- from "erect" to "erector" even though the former is a venerable English verb that's grammatically appropriate ("I asked him to erect the scaffolding."). If you introduce the library and your coworkers get all giggly then I think if you just say the name with a straight face and then roll your eyes and mock your bawdy buddies when they snicker then all will be well. After a few repetitions it won't sound odd at all.

**You've never heard of it.** Help spread the word! Post a review on your blog! Ask your favorite app framework whether they support it! Post code samples in Erector and when people say "What's that?" then point them at <http://erector.rubyforge.org>! Give a talk at a meetup! Write your congressman and ask if she supports the Erector Mandate Bill of 2009! Buy [ad space on the moon](http://www.universetoday.com/2009/07/24/company-looks-to-etch-advertising-on-the-moon/)!

---

So, in conclusion, and despite my somewhat snarky tone throughout, I am honestly and desperately curious to know why the world has not yet beat a path to Erector's door. Anybody got any more ideas?

Also, there's been some interesting discussion of an early draft of this blog post on [this thread in the Erector Google Group]().
